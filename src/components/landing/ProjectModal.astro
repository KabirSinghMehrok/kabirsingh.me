---
import Link from "../Link.astro";

// src/components/Modal.astro
interface Props {
  modalId: string;
  title: string;
  tagline: string;
  imageUrl: string;
  github_url: string;
  live_url: string;
  role: string;
  status: string;
  iconEmoji: string;
  technologies: string[];
}

const {
  title,
  tagline,
  imageUrl,
  github_url,
  live_url,
  iconEmoji,
  technologies,
  modalId,
  ...props
} = Astro.props;
---

<div class="modal-overlay" id={modalId} aria-hidden="true">
  <div
    class="modal-container"
    role="dialog"
    aria-modal="true"
    aria-labelledby={`title-${modalId}`}
  >
    <header class="modal-header px-4">
      <button class="modal-close-btn" data-modal-close aria-label="Close modal"
        >&times;</button
      >
      <div class="flex flex-col md:flex-row gap-2 w-full">
        <div
          class="w-[50px] h-[50px] shrink-0 text-[40px] flex items-center justify-center"
        >
          {iconEmoji}
        </div>
        <div class="flex flex-col w-full">
          <div class="flex md:flex-row justify-between gap-2 flex-grow">
            <p class="text-[18px] font-sans font-medium source-sans-3-bold">
              {title}
            </p>
            <div class="flex flex-row gap-2 shrink-0">
              {github_url && <Link href={github_url}>github</Link>}
              {live_url && <Link href={live_url}>live link</Link>}
            </div>
          </div>
          <p class="text-[15px] source-sans-3-light">
            {tagline}
          </p>
          <div class="flex flex-row gap-1 flex-wrap">
            {
              technologies.map((technology) => (
                <p class="border border-slate-300 leading-6 py-0 px-2 rounded-sm text-[12px] source-sans-3-light truncate">
                  {technology}
                </p>
              ))
            }
          </div>
        </div>
      </div>
    </header>
    <main class="modal-content px-4 pb-4">
      <slot />
    </main>
  </div>
</div>

<style>
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.7);
    display: flex;
    justify-content: center;
    align-items: center;
    visibility: hidden;
    opacity: 0;
    transition:
      opacity 0.3s ease,
      visibility 0.3s ease;
    z-index: 1000;
  }

  .modal-overlay.is-open {
    visibility: visible;
    opacity: 1;
  }

  .modal-container {
    background-color: white;
    border-radius: 8px;
    width: 90%;
    max-width: 700px;
    max-height: 90vh;
    overflow-y: auto;
    transform: scale(0.9);
    transition: transform 0.3s ease;
  }

  .modal-overlay.is-open .modal-container {
    transform: scale(1);
  }

  .modal-header {
    display: flex;
    flex-direction: column;
    align-items: end;
    border-bottom: 1px solid #ddd;
    padding-bottom: 1rem;
    margin-bottom: 1rem;
  }

  .modal-close-btn {
    font-size: 2rem;
    background: none;
    border: none;
    cursor: pointer;
  }

  .modal-content :global(p) {
    font-size: 15px;
  }
  .modal-content :global(h3) {
    margin-bottom: 0px;
    margin-top: 8px;
  }
  .modal-content :global(ul) {
    font-size: 15px;
    color: "#222939";
    font-family: "Source Sans 3", sans-serif;
    font-optical-sizing: auto;
    font-weight: 300;
    font-style: normal;
  }
</style>
