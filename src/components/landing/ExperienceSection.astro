---
import Experience from "./Experience.astro";
import Link from "../Link.astro";
import ExperienceModal from "./ExperienceModal.astro";
const experience = await Astro.glob("../../data/experience/*.md");
const images = import.meta.glob<{ default: ImageMetadata }>(
  "/src/assets/experience-logos/*",
);

const experienceBreakpoint = 2; // any entry after this will just be an icon
const sortedExperience = experience.sort(
  (a, b) =>
    new Date(b.frontmatter.start_date).valueOf() -
    new Date(a.frontmatter.start_date).valueOf(),
);
const rowExperienceList = sortedExperience.slice(0, experienceBreakpoint);
const iconExperienceList = sortedExperience.slice(experienceBreakpoint);
---

<div class="flex flex-col gap-2">
  <div class="flex flex-col mb-2">
    <h2
      class="text-[30px] md:text-[40px] source-serif-4-super-light leading-none"
    >
      I've worked at amazing places
    </h2>
    <p class="'text-[15px] text-slate-500">
      Help me expand this list, reach me out on
      <Link href="mailto:mehrok.kabir.singh@gmail.com" fontSize="15px">
        email
      </Link>
      or
      <Link
        href="https://www.linkedin.com/in/kabirsinghmehrok/"
        fontSize="15px"
      >
        linkedin
      </Link>
    </p>
  </div>
  <div class="flex flex-col gap-2">
    {
      rowExperienceList.map(async (exp, idx) => {
        const image =
          await images[
            `/src/assets/experience-logos/${exp.frontmatter.iconUrl}`
          ]();
        return (
          <>
            <Experience
              variant={"row"}
              start={exp.frontmatter.start_date}
              end={exp.frontmatter.end_date}
              jobTitle={exp.frontmatter.role}
              company={exp.frontmatter.company}
              description={exp.frontmatter.summary}
              icon={image.default}
              modalId={`modal-${exp.frontmatter.company}`}
            />
          </>
        );
      })
    }
  </div>

  <div class="flex flex-row gap-4 flex-wrap items-center mt-8">
    <div class="flex flex-row">
      <h2
        class="text-[25px] md:text-[35px] source-serif-4-super-light leading-none"
      >
        and here
      </h2>
      <img src="/right-arrow.svg" alt="arrow-right" class="mx-4" />
    </div>

    {
      iconExperienceList.map(async (exp, idx) => {
        const image =
          await images[
            `/src/assets/experience-logos/${exp.frontmatter.iconUrl}`
          ]();
        return (
          <Experience
            variant={"icon"}
            start={exp.frontmatter.start_date}
            end={exp.frontmatter.end_date}
            jobTitle={exp.frontmatter.role}
            company={exp.frontmatter.company}
            description={exp.frontmatter.summary}
            icon={image.default}
            modalId={`modal-${exp.frontmatter.company}`}
          />
        );
      })
    }
  </div>
</div>

{
  sortedExperience.map(async (exp, idx) => {
    const image =
      await images[`/src/assets/experience-logos/${exp.frontmatter.iconUrl}`]();
    return (
      <ExperienceModal
        start={exp.frontmatter.start_date}
        end={exp.frontmatter.end_date}
        jobTitle={exp.frontmatter.role}
        company={exp.frontmatter.company}
        description={exp.frontmatter.summary}
        icon={image.default}
        modalId={`modal-${exp.frontmatter.company}`}
      >
        <exp.Content />
      </ExperienceModal>
    );
  })
}

<script>
  document.addEventListener("DOMContentLoaded", () => {
    // Function to open a modal
    const openModal = (modal) => {
      if (modal == null) return;
      modal.classList.add("is-open");
      document.body.style.overflow = "hidden"; // Prevent background scrolling
    };

    // Function to close a modal
    const closeModal = (modal) => {
      if (modal == null) return;
      modal.classList.remove("is-open");
      document.body.style.overflow = "auto"; // Restore scrolling
    };

    // --- Event Listeners ---

    // 1. Open modal
    const openModalTriggers = document.querySelectorAll("[data-modalTrigger]");
    openModalTriggers.forEach((trigger) => {
      trigger.addEventListener("click", (event) => {
        event.preventDefault();
        const modalId = trigger.getAttribute("data-modalTrigger");
        const modal = document.getElementById(modalId);
        openModal(modal);
      });
    });

    // 2. Close modal via the close button
    const closeModalButtons = document.querySelectorAll("[data-modal-close]");
    closeModalButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const modal = button.closest(".modal-overlay");
        closeModal(modal);
      });
    });

    // 3. Close modal by clicking the overlay
    document.querySelectorAll(".modal-overlay").forEach((overlay) => {
      overlay.addEventListener("click", (event) => {
        // Only close if the overlay itself is clicked, not its children
        if (event.target === overlay) {
          closeModal(overlay);
        }
      });
    });

    // 4. Close modal with the 'Escape' key
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape") {
        const openModal = document.querySelector(".modal-overlay.is-open");
        closeModal(openModal);
      }
    });
  });
</script>
